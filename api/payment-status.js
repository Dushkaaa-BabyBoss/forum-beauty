import crypto from 'crypto';
import { sendEmail } from './emailService';
import dotenv from 'dotenv';

dotenv.config();

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method Not Allowed' });
  }

  const { sessionId, orderId, status, amount, currency, sign, email, name, surname, ticketType, phone } = req.body;

  console.log('Payment status received:', req.body);

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ –ø—ñ–¥–ø–∏—Å—É
  const generatedSign = generateSign(req.body);
  if (sign !== generatedSign) {
    return res.status(400).json({ error: 'Invalid sign' });
  }

  if (status === 'SUCCESS') {
    console.log('‚úÖ Payment successful');

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    const emailResponse = await sendEmail(email, name, surname, ticketType, amount, phone);
    if (emailResponse.success) {
      console.log('üì© Email —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!');
    } else {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ email:', emailResponse.error);
    }

    res.status(200).json({ success: true });
  } else {
    console.log('‚ùå Payment failed');
    res.status(200).json({ success: false });
  }
}

// –§—É–Ω–∫—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—ñ–¥–ø–∏—Å—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–≤—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ P24
function generateSign(data) {
  const { sessionId, merchantId, amount, currency } = data;
  const CRC = process.env.P24_TEST_CRC_KEY;
  const stringToHash = `${sessionId}|${merchantId}|${amount}|${currency}|${CRC}`;
  return crypto.createHash('sha384').update(stringToHash).digest('hex');
}
